******************************************************************************
传输的类型
    点对点 (单播)
    广播

按尺度分类网络
    PAN (Personal Area Network) 个域网
        蓝牙
    LAN局域网
        无线局域网 / IEEE 802.11 / WiFi
            计算机和 AP 无线路由器 通信
        交换以太网
            计算机连接到交换机, 和交换机通信以完成数据交换

分层网络
    概念    - 协议栈
            - 协议
            - 对等体
            - 接口
            - 服务
            - 网络体系结构  层和协议的集合

报文交换有两种
    存储转发式交换:     先收到整个报文, 再转发
    直通式交换:         还未收到整个报文就转发

服务, 协议和接口
    是不同的概念
    服务
        这一层能做什么
    接口
        上一层应当如何访问这一层, e.g. 有什么参数, 什么结果
    协议
        这一层内部是如何实现对等体通信的

参考模型
    OSI RefModel
        OSI 参考模型不是一个网络体系结构!
        从上到下
            应用层
                给用户提供应用
                交换单元:   APDU
            表示层
                控制信息的表示
            会话层
                允许建立会话
            传输层
                交换单元:   TPDU
                提供端到端的可靠传输
            * 以下的都属于通信子网
            网络层
                提供端到端的比特传输
                交换单元:   数据包 packet
                包含
                    路由选择
                    拥塞控制
                    连接不同类型的网络
            数据链路层
                提供链路两端的可靠的传输
                交换单元:   帧 frame
                包含
                    检错纠错,
                    流量控制,
                    广播共享信道控制 (这个是介质访问控制子层)
            物理层
                提供链路两端的不可靠的原始的比特传输
                交换单元:   比特
    TCP/IP RefModel
        主要的目的: 可互联性, 可靠性, 允许多种服务类型
        使用数据包交换网络
        应用层
            协议
                TELNET
                FTP
                SMTP
                DNS
                HTTP
        传输层
            允许源主机与目标主机上的对等实体进行通话
            协议
                TCP     可靠的面向连接的, 抽象为比特流
                UDP     不可靠无连接的
        互联网层
            对应网络层
            使数据包独立到达接收方 (顺序控制由上层提供)
            协议
                IP
                ICMP
        链路层
            不等同于 OSI 的数据链路层
            协议
                DSL
                SONET
                802.11 WiFi
                Ethernet

******************************************************************************
数据通信基础
    Nyquist定理
        有限带宽 B Hz, 无噪声的信道, 信号包含 V 个离散等级
            最大数据速率 = 2 B log_2 V
    信噪比
        SNR = 10 log_10 S/N     (dB)
        e.g. 电话系统: 30 dB
    香农公式
        有限带宽 B Hz, 信噪比 S/N
            最大比特率 = B log_2 1+S/N
    波特率
        信号每秒变化的速度, 亦称调制速率
        e.g. 每个信号值可以表示3位, 则 比特率 是 波特率 的3倍

数据编码
    数字数据的数字传输 (基带传输)
        方式: \graphics{linecode}
            - NRZ
                容易出错, 需要同步
            - Manchester
                能够自同步
    数字数据的模拟传输 (频/通带传输)
        方式: \graphics{passband}
            - 调幅, 调频, 调相
    模拟数据数字传输
        PCM
        按照Nyquist采样
        - 将 f(t) 分成 2^n 级, 数字传输级数
        - 传输 f(t) 的差分
        - 根据每个采样值和前一个差 +-1, 决定传输 0 还是 1

多路复用
    时分复用
        主要用于数字传输
        T1 传输, 1.544 Mbps
    频分复用
        将频率分为多部分
    波分复用
        主要用于光纤传输
        将波长分为多部分

通信方式
    数据信道和监视信道
    - 单工
    - 半双工
    - 全双工

数据传输方式
    - 异步
        信息以字符为单位传输
        效率较低
    - 同步
        信息以报文为单位传输
        效率较高
        SYN     SYN     DATA    SYN     SYN

通信交换
    - 电路交换 circuit switching
        先建立物理链路 (花费时间较长和)
        之后传输延时较小
    - 报文交换 message switching
        报文: 逻辑上完整的信息段
        信息以报文为单位存储转发
        线路利用率高, 延迟大
    - 分组交换 packet switching
        分组: 将报文分成更小的块
        分组在网络上存储转发, 在目标合并成报文
        线路利用率高, 延迟小, 需要传输额外信息
        - 数据报交换
            每个分组有完整的目标地址和源地址
            各个分组可能走不同的路劲
        - 虚电路
            传输前建立虚电路
            传输直接沿着虚电路
            最后拆除虚电路

******************************************************************************
介质访问控制子层
    目标: 在共享信道 (广播信道) 上传播消息

    动态信道分配假设
        - 流量独立
        - 单信道
        - 冲突可观察    (发生冲突后所有人都能知道)
        - 时间连续/离散
        - 载波监听/不听 (是否能检查信道忙)

    多路访问协议
        ALOHA
            1. 有数据, 立刻传输
            2. 如果冲突, 等待随机时间后转1., 直到没有冲突
            效率: 最好信道利用率 18%
        离散ALOHA
            和ALOHA相同, 但是传输数据总发生在离散时间片的开始段
            效率: ALOHA2倍 最好信道利用率 36%
        载波监听协议
            要求: 载波监听
            * 1-坚持载波检测多路访问 1-persistent CSMA
                1. 有数据, 监听信道
                    如果信道忙, 等到信道不忙之后, 立刻传输
                    否则立刻传输
                2. 如果冲突, 等待随机时间后传1.
            * 非坚持载波检测多路访问 non-persistent CSMA
                1. 有数据, 监听信道
                    如果信道忙, 等待随机时间后转1.
                    否则立刻传输
                2. 如果冲突, 等待随机时间后传1.
                相对于1-persistent, 冲突率减少, 延迟增大
            * p坚持载波检测多路访问 p-persistent CSMA
                要求: 时间离散
                1. 有数据, 监听信道
                    如果信道忙, 等到下一时间片转1.
                    否则, 按照p概率发送数据, 1-p概率等到下一时间片转1.
                2. 如果冲突, 等待随机时间后传1.
            冲突检测载波监听 CSMA/CD
                当检测到冲突后, 放弃当前帧传输, 而非等待传输完成

    无冲突协议
        位图协议
            基本思想: 信道的使用分为两部分
                1. (竞争) 各个发送者申请使用
                    此阶段为离散时间, 有N个发送者就消耗N个时间片
                    每个时间片, 有且仅有对应发送者广播自己是否有数据发送
                2. (发送) 发送数据
                    按照发送者序号顺序, 发送数据
            参见图4-6
            特点: 高负载情况下信道利用率更高
                高序号的站点占优势 (可以在申请过程的中途决定发送数据)
        令牌环
            - 发送者排成一个环, 环中有一个令牌一直在传递
            - 发送者只有在自己持有令牌时, 才能发送数据
            - 发送者发送完所有数据, 将令牌传递给下一个发送者

    有限冲突协议
        自适应树
            基本思想: 信道的使用分为竞争和发送两部分
                发送者作为树的叶子
            参见图4-10
            竞争部分可以从树的不同深度开始, 以适应不同负载

    无限LAN协议
        无线网络: 不能检测冲突
            不是完全的广播, 而是只能收到/发给靠近的结点
        问题:
            隐藏终端 (接受者实际发生冲突) / 暴露终端 (发送者实际不冲突)
        解决: 避免冲突的协议 MACA
            - 发送者发送 请求发送帧, 包含发送数据长度
            - 接收者接受 请求发送帧 后发送 允许发送帧, 包含发送数据长度
            - 发送者发送数据
            - 如果还冲突, 等待随机时间后从头开始

    数据链路层交换
        交换: 不同局域网连接, 允许数据在不同局域网之间交换
        网桥: 数据链路层, 审查帧的数据链路层地址 -> 不受上层协议限制
        学习网桥
            帧:     记为<SA, DA, II>
                源地址      SA,
                目标地址    DA,
                载荷        payload,
                输入端口    II
            哈希表: 记为DA -> OI
                目标地址    DA,
                输出端口    OI
            - 源地址为SA的帧从端口II进入,
                发送:
                    哈希表中无DA项:
                        OI未知
                        广播到所有端口 (II除外)
                        称为洪泛
                    有:
                        如果 OI 等于 II, 则不转发
                        否则转发到 OI
                更新:
                    SA -> II
                    称为后向学习




******************************************************************************
*                                    wk11                                    *
******************************************************************************

课前
    传输格式 [地址 (send, recv) 控制]
    传发方式
    路由控制


网络层和路由选择
    最底层, 能够处理端到端的 (链路层: 只是从某链路一边至另一边, 不涉及路由中继)
    关键问题
        - 了解通信子网的拓扑结构
        - 选择路由
    为传输层提供的服务
        - 有连接的
        - 无连接的
    内部组织
        - VC        虚电路
            路由维护所有VC的状态
            建立连接花费时间
            容易保证QoS
        - datagram  数据包
            每个包都需携带完整的目标/源地址
            每次转发包时过程复杂
            不易保证QoS
            对于线路故障适应性强
    注意, 有无连接和VC/Datagram没有必然联系


路由算法
    入境包应被发送到哪条出境线路
    要求
        - 正确
        - 简单
        - 鲁棒
        - 稳定
        - 公平
        - 高效
    分类
        - 适应性的
            根据网络拓扑, 包括通信压力, 改变路由选择
        - 非适应性的
            i -> j 的路由选择是离线计算的, 在网络启动时分配给诸路由
            无法应对差错 -> 第一路由, 第二路由 ...
            对于小网络常用
    最短路方法
        Dijkstra等
            不能应对路由故障
    Flooding 洪泛
        所有入境包被发送到所有出境线
        改进: 限制跳数 -> 指数级别的代价
              各个路由不重复发
              只把包发送到和目标方向接近的出境线上
        非常可靠
        问题: 重复包太多
    Distance Vector Routing
        每个路由维护一个表
            目标 -> 目前已知的到目标的最短路, 此最短路对应出境线路
            对于每个节点u:
                到邻居v的距离是 w_uv
                邻居到w的距离是 TABLE[v][w].dist
                如果 w_uv + TABLE[v][w].dist < TABLE[u][w].dist
                    更新
        实质是分布式的Bellman-Ford算法
        时间节点的选择
            - 周期性
        能够很好适应故障节点上线 (good news travels quickly)
        问题: 如果某路由v故障, 只有邻居u能知道 w_uv 变成无穷
            但是其他路由的 w_uv 没有更新, 是错误的w_uv
            虽然bellman ford保证最后 w_uv 会收敛到无穷, 但是结果可能很漫长
            (bad news travels slowly)
    Link State Routing
        在某个时间节点, 每个路由u执行
            1. 发现所有邻居v, 以及期间距离 w_uv
                点到点发送 HELLO 包 / 返回 HELLO_RESP 包
                发送 ECHO 包
            2. 给所有路由发送包, 包含 u到所有邻居v的距离 w_uv
            3. 接受所有的 w_st
            4. 局部执行Dijkstra算法, 计算TABLE[u][w].next
        实际上就是分布式的Dijkstra算法
        时间节点的选择:
            - 周期性
            - 网络拓扑改变时
        引用
            IS-IS
            OSPF
        问题
            震荡: 路由时断时续
            健壮性: 路由广播错误的 w_uv, 错误传播到全网
    Hierarchical Routing
        网络越大, 路由需要的存储/计算越多
        将整个网络分成不同区域, 每个区域内所有路由是互联的
        每个区域的路由, 对于其他区域的路由, 由其区域代表
        -> 每个区域再分成不同的子区域
        (network -> region -> cluster -> zone -> group ...)
#   Broadcast Routing
#       朴素: 源发送包给所有目标 (i.e. 网络中所有其他节点)
#       multidestination routing:
#           每个包包含一系列地址 (而不是单个地址)
#           仍然需要源知道所有目的
#       flooding:
#           改进, 每个点只洪泛一次
#       reverse path forwarding
#           维护网络的一颗生成树, 只洪泛从父亲过来的包
#   Multicast Routing
#       假设多播组地址已知, 最简单的方法是沿用广播路由方法的生成树方法
#       改进:   将广播生成树对于不同的多播组剪枝, 得到多播生成树
#       剪枝方法:
#           如果路由知道网络结构, 则直接简单地计算即可
#               -> MOSPF
#           如果路由不知道, 可以递归剪枝
#               如果节点本身 / 所有儿子没有某多播组成员, 面对多播要求返回 PRUNE 信息
#               -> DVMRP
    移动主机的路由
        移动用户
            位置发生变化接入网络
        Home Location
            所有用户 (含移动用户) 有一个永久的 Home Address
        Foreign Agent
            每个区域有外部代理, 记录该区域内的移动用户
        Home Agent
            每个区域记录 Home 在此区域, 但是在其他区域的用户
        方法
            移动用户进入某区域
                在Foreign Agent注册


    拥塞控制算法
        拥塞:   网络信道上有太多包
        原因:   处理器慢 / 线路带宽窄

        和流量控制的区别
            拥塞:   全局性问题, 涉及主机/路由等
            流量:   点到点/端到端, 只涉及两个主机

        控制算法
            开环控制
                通过好的网络设计
                与网络当前状态无关
            闭环控制
                基于反馈, 基于当前网络状态
                反馈: 向负载产生源发送报警包
                    周期性地检查是否拥塞

        衡量网络拥塞的参数
            丢包率; 重传包的数目;
            平均包延迟;
            路由中包队列长度;
            包延迟的抖动

        流量整形
            原理: 拥塞情况通常是因为流量burst出现
            方式: 强迫包的发送速率是可预测的
            漏桶算法
                类似向底部有漏洞的木桶中以有burst的速率加水
                底部漏水速率不会有burst
            令牌桶算法
                每隔固定时间给发送方一个令牌, 允许发送一定量的数据
                令牌数目有最大值

        虚电路中拥塞控制
            许可控制:   发生拥塞时, 不允许建立新的虚电路
                                  / 新的虚电路需要绕开拥塞区域
                                  / 建立虚电路时, 子网需要预留空间
            抑制包:     路由器监控线路等状态, 利用率太高进入预警状态
                            主机向预警线路上发送包时, 路由器警告主机
                            要求主机减少发送速率
            公平队列:   路由器有多个输出队列, 路由器循环扫描各个队列,
                            发送队列头
            负载丢弃:   最后的方法
                            可能有不同的丢弃策略: 优先丢弃新报/旧包


    网络互连
        级联虚电路
            当目的主机不在子网内时,
                在子网内找一个离目的主机最近的路由,
                建立源主机到它, 它到目的主机的虚电路
            特点
                可以预留资源等虚电路优点
                健壮性差, 不抗拥塞
                路由需要大量内存
        无连接网络互连
            需要在连接不同子网的多协议路由器中, 做协议转换
            特点
                健壮性好
                包头长
                包到达无序
        隧道技术
            ...

    防火墙
        目的:   防止网络中信息泄露, 防止外部信息渗入
        可以在路由器中实现, 还可以在应用网关中实现

    Internet网络层协议
        IP协议: 包头长20 ~ 60字节
        IP地址:
            组成: 网络号 network (包含子网) + 主机号 Host
            最初: 地址分类 (A类地址 ... E类地址)
            修正: 无类别地址 (subnet mask是对于 network 整体的掩码 整体的掩码))


传输层
    目的
        消除网络层的不可靠性
        提供端到端主机的可靠的信息传输
    服务类型: 有连接 / 无连接
        (即使网络层是有连接的, 传输层也可以是无连接的)
    传输服务提供者: 物理, 链路, 网络, 传输层
    传输层的数据单元称为segment段
    Berkley Socket
        原语:
            socket  初始化socket
            bind    绑定到地址
            listen  初始化入境队列, 允许监听 (非阻塞)
            accept  阻塞等待下一个入境链接
            connect 连接到远程系统
            send    发送数据
            receive 接受数据
            close   请求关闭连接
            sendto  发送到
            recvfrm 接收到
    寻址
        TSAP: 传输层的一个端用户
        每个主机认为有一个NSAP, 但是可能有多个TSAP, 基本类似IP地址和端口号

        端口号的分配:
            确定的协议
            portmapper: 服务名 -> 端口

        初始连接协议 initial connection protocol:
            服务进程很多, 但是每一个都很少活动
            不用每一个进程一直监听一个端口, 而是动态分配

    建立连接
        理想情况:
                CONNECTION REQUEST
           src ---------------------> dst
               <--------------------
                CONNECTION ACCEPT
        问题: 网络不可靠
        解决: 多次握手方法
            参见Fig. 6-11


    释放连接
        理论基础: 不存在完全可靠的释放连接方法
        方法: 多次握手
            参见Fig. 6-14

    错误控制和流量控制
        通过类似链路层的 停等/滑动窗口协议 实现
        区别链路层为, 链路是点到点的没有跳数, 传输层是端到端的跳数不小
        -> 耗时更长, 一般采用更大的窗口大小

    TCP
        TSAP通过 IP地址:port端口 表示
        特点
            基于字节流
            不支持多播和广播
        错误/流量控制
            滑动窗口/可变滑动窗口
            慢启动: 最开始慢发, 逐渐提高发送速度
        链接管理
            建立: 3次握手
            释放: 3次握手 / 定时器
        TODO

    UDP

考试
    1, 2, 3, 4层, 体系结构很重要


习题课
    字符计数:   需要包含字符计数自身, 如
        5 A B C D
    字节填充 / 位填充
        都需要帧两端加上 FLAG
    3.11 行列奇偶校验
        要考虑校验位出现错误的情况
        对于行列校验存在不能检测的三位错误
    CSMA/CD协议需要在发送数据到信道前捕获信道
        即信道端到端传输需要时间最长时间的两倍

******************************************************************************
wk15
应用层协议
    进程如何指定他的 peer
        IP 指定主机, port 指定远程主机的进程
    应用层服务的类型
        - 可靠性
        - 带宽要求
        - 延时要求
    C/S 架构
        数据在客户端和服务器间双向流动
    例子
        - DNS

******************************************************************************
rev

    data link layer:    very important

