******************************************************************************
wk11
    dram    1个晶体管, 1个电容
            读完就变成0, 内部控制电路需要完成回写
            需要刷新
    sram    6个晶体管

    程序的局部性原理
        时间: 此时访问, 将来访问
        空间: 此处访问, 周围访问
        -> 利用层次存储器

        cache   主存和CPU之间
            特点
                高速    相对于
                透明    完全硬件管理, 对程序员透明
            cache结构
                一个cache line
                    +-------------+-------------------+-------------------+
                    |             |                   |                   |
                    |             | TAG               | DATA              |
                    |             | (indicate ADDR)   | (usually a word)  |
                    |             +-------------------+-------------------+
                    |             |                   |                   |
                    |             | TAG               | DATA              |
                    |             |                   |                   |
                    | VALID       +-------------------+-------------------+
                    | (usually    |                   |                   |
                    |  1 bit)     | ....              | ....              |
                    |             |                   |                   |
                    |             +-------------------+-------------------+
                    |             |                   |                   |
                    |             | TAG               | DATA              |
                    |             |                   |                   |
                    +-------------+-------------------+-------------------+
                问题
                    1. 通过内存地址得到cache中的数据
                        检查TAG 和VALID
                    2. 主存-cache的数据一致性
                        -> esp. 多核cpu, 不同cpu cache间的情况
                    3. 数据交换粒度
                        就是一个cache line
                    4. cache的内容装载和替换策略
                        提高命中率HR = 命中次数 / 访问次数
                参数
                    块 (line)       数据交换的最小粒度
                        e.g.    4~128 B
                    命中            在较高层次的存储 (靠近cpu) 中发现内容
                    命中率          ...
                        e.g.    80~99 %
                    命中时间        访问较高层次的存储 (靠近cpu) 中内容用时
                        e.g.    1~4 cyc
                    不命中代价      ...
                        e.g. 10~50 cyc
                    平均访问时间
                        命中率 * 命中时间 + 不命中率 * 不命中代价
                        提高效率: 提高命中率; 减小不命中代价; 提高命中时间
            cache装载策略
                全相联
                    主存中任何地址可以装入cache中任何地址
                    31                                                      0
                    +------------------------------------------+-------------+
                    |  TAG                                     | last 2 bit  |
                    +------------------------------------------+-------------+
                    一个cache line只有1个记录
                    TAG = ADDR(31 downto 2)
                    写入cache
                        先检查是否已经在cache中
                        如果有空cache line, 直接装入该cache line
                        否则按照替换策略, 选择一个cache line替换
                        替换策略有
                            LRU     较高命中率, 但复杂
                            FIFO    满足局部性, 较简单
                            RAND    命中率也行, 较简单
                    读取cache
                        按照标记, 做一个 N路选择器
                        N是cache line的数目, 常常达到1024
                    特点
                        利用率高, 灵活
                        TAG太宽代价太高
                        N路选择器代价太高
                    主要使用在TLB, 内存对于磁盘的缓存等
                直接映射
                    主存中地址ADDR是如下关系
                    31                                                      0
                    +------------+-----------+-----------------+-------------+
                    |  TAG       | INDEX     | OFFSET          | last 2 bit  |
                    +------------+-----------+-----------------+-------------+
                    有 2 ** sizeof(INDEX) 个 cache line
                    一个cache line可能有 2 ** sizeof(OFFSET) 个记录
                    INDEX表示ADDR应存放到哪个cache line中
                    TAG用来比较确定该cache line中确实存放了ADDR周围的数据
                    OFFSET用来确定ADDR在对应的cache line中是哪一个记录
                    写入cache
                        先检查是否已经在 (INDEX中TAG相等)
                        将TAG改写, 然后写入块大小个记录
                    读取cache
                        直接按照TAG, INDEX, OFFSET来即可
                    特点
                        提高块大小可以提高空间局部性, 但是装载代价太大
                            (当然也要受限于访问特性)
                        方式直接, 但利用率低
                        标志位短
                        只需要比较一次 (只需要比较一个cache line的TAG)
                组相联
                    主存中地址ADDR是如下关系
                    31                                                      0
                    +------------+-----------+-----------------+-------------+
                    |  TAG       | INDEX     | OFFSET          | last 2 bit  |
                    +------------+-----------+-----------------+-------------+
                    此ADDR映射到块号为 ('0...0' . INDEX) - ('1...1' . INDEX)
                    有 2 ** (sizeof(INDEX) + k) 个cache line, 称 2**k 路组相联
                    一个cache line可能有2 ** sizeof(OFFSET) 个记录
                    效率成本取得均衡, 是常用的方式
                可以看成如下结构
                    每个内存地址是一个单元格,
                    并且每个内存地址对应的单元格的行是唯一的
                    全相联
                        +-------------------+-------------------+-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+-------------------+-------------------+
                    组相联
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                    直接映射
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
            一致性保证
                直写
                    强力保证一致性, 效率低
                    写操作
                        在cache中命中: 同时写cache和内存
                        在cache中不命中: 写内存, 装载/不装载入cache
                回写
                    替换cache时再写主存
                    写操作
                        在cache中命中: 写cache, 标记cache为DIRTY
                        在cache中不命中: 装载cache, 写cache
                    替换cache line操作
                        如果cache line为DIRTY, 将其写到内存中
                    注意可能需要监听内存总线, 如果有外部修改内存发生
                        如多核CPU等
                    减少写内存次数, 效率高
            缓存不命中原因
                compulsory miss
                    由于冷缓存
                    解决: prefetch等
                capacity miss
                    活动数据集大小大于缓存大小
                    解决: 增大缓存容量
                conflict miss
                    由于冲突 (INDEX相等, TAG不同)
                    解决: 增加相联组数
                invalidated miss
                    其他进程修改了主存数据等
            变种
                多级cache
                    exclusive   L2进入L1时, L2中的数据失效
                    inclusive   L2中数据保持
                哈弗结构cache (L1实际应用)
                cache接入系统
                    - 直接接系统总线, 成本低
                    - 特别总线连到cpu, 系统总线连到内存, 成本高
                MESI一致性保证
