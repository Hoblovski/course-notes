******************************************************************************
wk11
    dram    1个晶体管, 1个电容
            读完就变成0, 内部控制电路需要完成回写
            需要刷新
    sram    6个晶体管

    程序的局部性原理
        时间: 此时访问, 将来访问
        空间: 此处访问, 周围访问
        -> 利用层次存储器

        cache   主存和CPU之间
            特点
                高速    相对于
                透明    完全硬件管理, 对程序员透明
            cache结构
                一个cache line
                    +-------------+-------------------+-------------------+
                    |             |                   |                   |
                    |             | TAG               | DATA              |
                    |             | (indicate ADDR)   | (usually a word)  |
                    |             +-------------------+-------------------+
                    |             |                   |                   |
                    |             | TAG               | DATA              |
                    |             |                   |                   |
                    | VALID       +-------------------+-------------------+
                    | (usually    |                   |                   |
                    |  1 bit)     | ....              | ....              |
                    |             |                   |                   |
                    |             +-------------------+-------------------+
                    |             |                   |                   |
                    |             | TAG               | DATA              |
                    |             |                   |                   |
                    +-------------+-------------------+-------------------+
                问题
                    1. 通过内存地址得到cache中的数据
                        检查TAG 和VALID
                    2. 主存-cache的数据一致性
                        -> esp. 多核cpu, 不同cpu cache间的情况
                    3. 数据交换粒度
                        就是一个cache line
                    4. cache的内容装载和替换策略
                        提高命中率HR = 命中次数 / 访问次数
                参数
                    块 (line)       数据交换的最小粒度
                        e.g.    4~128 B
                    命中            在较高层次的存储 (靠近cpu) 中发现内容
                    命中率          ...
                        e.g.    80~99 %
                    命中时间        访问较高层次的存储 (靠近cpu) 中内容用时
                        e.g.    1~4 cyc
                    不命中代价      ...
                        e.g. 10~50 cyc
                    平均访问时间
                        命中率 * 命中时间 + 不命中率 * 不命中代价
                        提高效率: 提高命中率; 减小不命中代价; 提高命中时间
            cache装载策略
                全相联
                    主存中任何地址可以装入cache中任何地址
                    31                                                      0
                    +------------------------------------------+-------------+
                    |  TAG                                     | last 2 bit  |
                    +------------------------------------------+-------------+
                    一个cache line只有1个记录
                    TAG = ADDR(31 downto 2)
                    写入cache
                        先检查是否已经在cache中
                        如果有空cache line, 直接装入该cache line
                        否则按照替换策略, 选择一个cache line替换
                        替换策略有
                            LRU     较高命中率, 但复杂
                            FIFO    满足局部性, 较简单
                            RAND    命中率也行, 较简单
                    读取cache
                        按照标记, 做一个 N路选择器
                        N是cache line的数目, 常常达到1024
                    特点
                        利用率高, 灵活
                        TAG太宽代价太高
                        N路选择器代价太高
                    主要使用在TLB, 内存对于磁盘的缓存等
                直接映射
                    主存中地址ADDR是如下关系
                    31                                                      0
                    +------------+-----------+-----------------+-------------+
                    |  TAG       | INDEX     | OFFSET          | last 2 bit  |
                    +------------+-----------+-----------------+-------------+
                    有 2 ** sizeof(INDEX) 个 cache line
                    一个cache line可能有 2 ** sizeof(OFFSET) 个记录
                    INDEX表示ADDR应存放到哪个cache line中
                    TAG用来比较确定该cache line中确实存放了ADDR周围的数据
                    OFFSET用来确定ADDR在对应的cache line中是哪一个记录
                    写入cache
                        先检查是否已经在 (INDEX中TAG相等)
                        将TAG改写, 然后写入块大小个记录
                    读取cache
                        直接按照TAG, INDEX, OFFSET来即可
                    特点
                        提高块大小可以提高空间局部性, 但是装载代价太大
                            (当然也要受限于访问特性)
                        方式直接, 但利用率低
                        标志位短
                        只需要比较一次 (只需要比较一个cache line的TAG)
                组相联
                    主存中地址ADDR是如下关系
                    31                                                      0
                    +------------+-----------+-----------------+-------------+
                    |  TAG       | INDEX     | OFFSET          | last 2 bit  |
                    +------------+-----------+-----------------+-------------+
                    此ADDR映射到块号为 ('0...0' . INDEX) - ('1...1' . INDEX)
                    有 2 ** (sizeof(INDEX) + k) 个cache line, 称 2**k 路组相联
                    一个cache line可能有2 ** sizeof(OFFSET) 个记录
                    效率成本取得均衡, 是常用的方式
                可以看成如下结构
                    每个内存地址是一个单元格,
                    并且每个内存地址对应的单元格的行是唯一的
                    全相联
                        +-------------------+-------------------+-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+-------------------+-------------------+
                    组相联
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                        | VALID, TAG, DATA  | VALID, TAG, DATA  |
                        +-------------------+-------------------+
                    直接映射
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
                        | VALID, TAG, DATA  |
                        +-------------------+
            一致性保证
                直写
                    强力保证一致性, 效率低
                    写操作
                        在cache中命中: 同时写cache和内存
                        在cache中不命中: 写内存, 装载/不装载入cache
                回写
                    替换cache时再写主存
                    写操作
                        在cache中命中: 写cache, 标记cache为DIRTY
                        在cache中不命中: 装载cache, 写cache
                    替换cache line操作
                        如果cache line为DIRTY, 将其写到内存中
                    注意可能需要监听内存总线, 如果有外部修改内存发生
                        如多核CPU等
                    减少写内存次数, 效率高
            缓存不命中原因
                compulsory miss
                    由于冷缓存
                    解决: prefetch等
                capacity miss
                    活动数据集大小大于缓存大小
                    解决: 增大缓存容量
                conflict miss
                    由于冲突 (INDEX相等, TAG不同)
                    解决: 增加相联组数
                invalidated miss
                    其他进程修改了主存数据等
            变种
                多级cache
                    exclusive   L2进入L1时, L2中的数据失效
                    inclusive   L2中数据保持
                哈弗结构cache (L1实际应用)
                cache接入系统
                    - 直接接系统总线, 成本低
                    - 特别总线连到cpu, 系统总线连到内存, 成本高
                MESI一致性保证

******************************************************************************
wk12
虚拟内存
    好处
        - 隔离进程地址空间, 隔离进程和操作系统
        - 实现物理内存的共享
        - 实现内存保护, i.e. 读写权限控制
    cache中, 可能是虚拟地址, 可能是物理地址

    虚拟存储器管理
        段地址转换
            段表
                基地址: 整个段表的位置
                每个条目
                    起始地址
                    段长            可以变, 但x86中确定不变
                    是否已装入内存
                    保护 / 共享 (进程间) 等标识

            将虚拟地址分成2部分:    段号 偏移量

            段号  ---+----> 起始地址 ----+----> 物理地址
                     |                   |
                     |                   |
                    段表               偏移量

        页式地址转换
            有多个页项, 其地址再做成一张表成为页目录

            将虚拟地址分成3部分:    页表号 页内偏移量 内存偏移量

            页表号 ---+----> 页 ----+----> 起始地址 -----+----> 物理地址
                      |             |                    |
                      |             |                    |
                    页目录        页内偏移量          内存偏移量 

            TLB
                内存访问是瓶颈, 所以将页再次缓存做成TLB, 称 "快表"

                表项不会很大, 实现为全相联

            页表大小选择
                越小:   内存浪费越少, 页表页目录越大
                越大:   转换速度越快
            页表替换算法
                LRU


******************************************************************************
wk13
磁表面存储
    磁芯存储器
        显然不考
    磁表面存储设备
        磁颗粒中偏转方向
        随机读取
            访问时间与信息存放的位置无关
            每一位都有各自的读写设备
        串行访问
            访问时间和存储位置有关
    主要技术指标
        存储密度 / 容量
        寻址时间
        带宽 
    编码方式
        显然不考虑
    访问过程
        寻道        典型时间 8 ~ 12 ms
        寻扇区      时间 平均一半周转时间
        读写数据    数据数据 / 传输速度
    加速访问
        每次读取多个扇区
        并行读取
    一般扇区大小远小于页容量, 可以做到抛弃物理损坏的扇区, 加速检错纠错
        -> 将页面放到相邻的扇区中加速
    RAID技术
        目标: 提高可用性和性能
        RAID0
            提高访问速度
             disk 1     disk 2
           +--------+ +--------+
           | A0     | | A1     |
           +--------+ +--------+
           | A2     | | A3     |
           +--------+ +--------+
           | A4     | | A5     |
           +--------+ +--------+
           | A6     | | A6     |
           +--------+ +--------+

******************************************************************************
wk13 MIPS异常处理
    异常和中断
        异常    CPU内部, 是执行某条指令的结果
        中断    CPU外部, 发生的时机不可预测
    CP0
        处理器 / 硬件控制等信息
        IE:     -> 异常处理过程中不允许中断
        KSU:    内核, 用户等模式
        ebase   ebase[n] 存储n号异常处理程序的入口
    流水CPU
        精确异常    
            产生异常时, victim之前的指令都执行完成
                        victim及以后的指令都如同没有执行
    异常分类
        - 外部中断
        - 访存异常
        - 系统调用
        - 计算异常
        - 程序/硬件错误
    异常处理的流程
        保存现场
        判断异常类型, 跳转到处理程序
        处理异常
        恢复原程序
    中断处理
        中断发生时, 完成 MEM 阶段的指令继续执行, 其他指令丢弃
        因为修改处理器/计算机状态的阶段只有 MEM/WB
    启动过程
    异常嵌套
        利用异常帧, 将异常处理状态存入主存
    虚拟地址划分


******************************************************************************
wk14
I/O
    外设输入输出性质
        数据传输速率差异很大

    I/O方式
        CPU控制输入输出的方式
        基本外设控制方式: 通过外设寄存器

        程序直接控制
            需要轮询
            直接映射到一个地址, 通过MMU解决
            通过类似 x86 的 in, out 指令
            特点
                - 成本低
                - 效率低
                - 耗费CPU资源
        程序中断
            处理速度较轮询满
            仅当外部设备请求时, CPU才响应
            步骤
                - 外设发起请求
                    外设设置中断控制器
                - 处理器暂停正在处理的程序, 响应外设请求
                    MEM, WB指令继续执行, 其余 bubble 掉
                    保存现场, 处理中断, 中断返回
                - 处理完成后, 处理器恢复执行原程序
                注意嵌套中断
            8259A
                一片芯片只有8个中断源
                两片共15个中断源
                但是可以接总线, 一个中断源对应多个外设
        DMA
            允许设备直接访问内存
            适用于告诉设备
            问题
                虚实地址控制
                    一般使用实 (物理) 地址
                Cache一致性
                    - 不缓存
                    - DMA检查cache, 允许DMA访问cache
            特点
                一个DMA对应一个外设
        通道控制 
            

******************************************************************************
wk14
    总线
        只要实现 PCI 电气特点, 就可接入总线
        多个设备共享总线 (但是每时每刻只能有一个设备可用)
        特点
            外设接口标准化
            成为外设速度瓶颈
                被最慢的外设拖累
    例子
        单总线计算机
            早期计算机
            简单, 成本低, 但是速度慢
        双总线
            I/O 总线通过适配器和 Memory 总线相连
        三总线
            I/O 总线通过适配器连到 主板 PCI[E] 总线 通过适配器连到 Memory 总线
    类型
        处理器-主存
            在内存和cache中快速传输数据
        I/O 总线
            通过桥 / 主板和处理器-主存总线相连
        主板总线
    组成
        --------------------------------------------- 控制线
        --------------------------------------------- 数据线
        数据线一般包含数据和地址
        
        主设备  控制总线, 发起总线事务, 常常为CPU
        从设备  响应总线事务
        异步控制    通过控制信号
        同步设备    线上所有设备使用同一个时钟

        多个主设备
            仲裁
                主设备使用前先发出总线请求
            要求    - 优先级
                    - 公平性
            实际    - 集中仲裁 类似一个超级主设备
                    - 分布总裁 类似网路 MAC 访问
            菊链设备
                request 共用一条线发给仲裁者
                仲裁者给 最高优先级 允许使用的令牌
                最高优先级开始, 向下传递令牌

简单同步协议图似有误

******************************************************************************
wk15
接口电路和外部设备
    输入输出系统
        接口    提供主机识别外设的方式
            为外设提供编码
                提供主机和外设控制通信的机制
        8251 串行接口
            异步传输: 一个 RDY 信号, 一个 ACK 信号
            波特率: 就是每秒传输多少个字, 乘以一个字的长度就是比特率
            串口协议
                数据位是 5~8 位长
                -------+    +----+----+----+----+----+----+----+    +--------
                       |    |    |    |    |    |              |    |
                       |    |    |    |    |    |              |    |
                       +----+----+----+----+----+              +----+
                IDLE    SOF  DATA 0, 1...   PAR   EOF (2B) EMP  FIN   IDLE
            同步通信
                接受发送方时钟需要同步
                同步信号
                    内 / 外: 同步字符 / 硬件同步信号
            USB
                4根线:  GND, VCC, D+, D-
                    VCC 和 GND 更长一点
                即插即用
                结构
                    基于 hub 的主从结构
                设备检测
                    存在一个根 hub, 其轮询查询接口状态
                    对于所有设备赋值一个地址
                USB 帧
                    同步帧
                    块 (bulk) 数据
                    中断数据帧
        键盘
            通过阵列和串/并转换传输数据
            通过中断传输
        鼠标
            机械 / 光电

******************************************************************************
rev
ALU
    - 数据表示:
        整数根据有无符号, 用 0/-2**31 整数环中的整数表示
            即 原/补码
        浮点数: 多种类型
        检错纠错码
            奇偶校验
            Hamming 校验
    - 运算
        - 减法实现: 加上整数环中负元
        - 乘法实现: 布斯算法
        - 除法: 列式, 即试商法
        - 关系算符: 标志位 Carry Zero oVerflow Sign
            用其逻辑函数来表示各种关系算符

CPU
    - 单周期
    - 多周期
        每条指令占用的指令周期数不同
        采用状态机设计
        - 硬连线
        - 微指令
    - 流水线
        冲突
            - control
            - data
        数据相关
            - stall
            - bubble
            - forwarding
            - branch pred.
            -* delay slot
            -* randomized execution

存储器
    物理实现
        - DRAM
        - SRAM
        - Disk
    层次存储结构
        - Cache
    虚拟存储空间
        地址映射

CP0 和操作系统协同
    
I/O 系统和设备

形式
    - 选择
    - 判断
    - 填空
    - 简答
    - 综合

`computer organization and design'
